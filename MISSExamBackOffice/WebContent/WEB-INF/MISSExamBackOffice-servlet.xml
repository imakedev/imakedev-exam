<?xml version="1.0" encoding="UTF-8"?>
<!--
	- DispatcherServlet application context for PetClinic's web tier.
-->
<!-- 
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
		xmlns:oxm="http://www.springframework.org/schema/oxm"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
				http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd">
				
				 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
	http://www.springframework.org/schema/jdbc 
	http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
	http://www.springframework.org/schema/data/jpa
   	http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
	http://www.springframework.org/schema/util 
	http://www.springframework.org/schema/util/spring-util-3.1.xsd
	">
<!--
		- The controllers are autodetected POJOs labeled with the @Controller annotation.
		<context:component-scan base-package="x.y.z.service, x.y.z.controller" /> 
		or 
		<context:component-scan base-package="x.y.z.service"/>
		<context:component-scan base-package="x.y.z.controller"/> 
	-->
	<context:property-placeholder properties-ref="deployProperties" />
	<context:annotation-config/>
	 <!-- <context:component-scan base-package="th.co.aoe.makedev.missconsult.exam.web,th.co.aoe.makedev.missconsult.exam.service.impl"/>  -->
<!-- 	<context:component-scan base-package="th.co.aoe.makedev.missconsult.exam.web"/> -->
 	<context:component-scan base-package="th.co.aoe.makedev.missconsult.exam.service.impl"/> 
	<mvc:annotation-driven/>
	<mvc:resources mapping="/resources/**" location="/resources/"/>
	<!-- Imports datasource configuration -->
	<tx:annotation-driven transaction-manager="transactionManager" />	

	<!-- Activate Spring Data JPA repository support -->
	
  	<jpa:repositories base-package="th.co.aoe.makedev.missconsult.exam.service" />
  	
	<!-- Declare a datasource that has pooling capabilities-->	 
	<bean id="jpaDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close"
		p:driverClass="${app.jdbc.driverClassName}"
		p:jdbcUrl="${app.jdbc.url}"
		p:user="${app.jdbc.username}"
		p:password="${app.jdbc.password}"
		p:acquireIncrement="5"
		p:idleConnectionTestPeriod="60"
		p:maxPoolSize="100"
		p:maxStatements="50"
		p:minPoolSize="10" />

 	<!-- Declare a JPA entityManagerFactory -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" 
		p:persistenceXmlLocation="classpath*:META-INF/persistence.xml"
		p:persistenceUnitName="hibernatePersistenceUnit"
		p:dataSource-ref="jpaDataSource"
		p:jpaVendorAdapter-ref="hibernateVendor"/>

	<!-- Specify our ORM vendor -->
	<bean id="hibernateVendor" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
	            p:showSql="false"/>

	<!-- Declare a transaction manager-->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager" 
		p:entityManagerFactory-ref="entityManagerFactory"/>
	<!-- <mvc:resources mapping="/resources/**" location="/resources/"/> -->
	<!--
		- The form-based controllers within this application provide @RequestMapping 
		- annotations at the type level for path mapping URLs and @RequestMapping 
		- at the method level for request type mappings (e.g., GET and POST). 
		- In contrast, ClinicController - which is not form-based - provides 
		- @RequestMapping only at the method level for path mapping URLs.
		-
		- DefaultAnnotationHandlerMapping is driven by these annotations and is 
		- enabled by default with Java 5+.
	-->
	
	<!--
		- This bean processes annotated handler methods, applying PetClinic-specific PropertyEditors
		- for request parameter binding. It overrides the default AnnotationMethodHandlerAdapter.
	--><!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> -->
<!-- 	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
 -->		
 	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> 
 <property name="webBindingInitializer">
			<bean class="th.co.aoe.makedev.missconsult.exam.web.MissConsultBindingInitializer"/>
		</property>
	</bean>

	<!--
		- This bean resolves specific types of exceptions to corresponding logical 
		- view names for error views. The default behaviour of DispatcherServlet 
		- is to propagate all exceptions to the servlet container: this will happen 
		- here with all other types of exceptions.
	-->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.springframework.web.servlet.PageNotFound">pageNotFound</prop>
				<prop key="org.springframework.dao.DataAccessException">dataAccessFailure</prop>
				<prop key="org.springframework.transaction.TransactionException">dataAccessFailure</prop>
			</props>
		</property>
	</bean>

	<!--
		- This view resolver delegates to the InternalResourceViewResolver and BeanNameViewResolver,
		- and uses the requested media type to pick a matching view. When the media type is 'text/html',
		- it will delegate to the InternalResourceViewResolver's JstlView, otherwise to the
		- BeanNameViewResolver. Note the use of the expression language to refer to the contentType
		- property of the vets view bean, setting it to 'application/vnd.springsource.samples.petclinic+xml'.
	-->
	<!--  
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes">
			<map>
				<entry key="xml" value="#{vets.contentType}"/>
				<entry key="atom" value="#{visits.contentType}"/>
			</map>
		</property>
		<property name="order" value="0"/>
	</bean>
    -->
	<!--
		- The BeanNameViewResolver is used to pick up the visits view name (below).
		- It has the order property set to 2, which means that this will
		- be the first view resolver to be used after the delegating content
		- negotiating view resolver.

	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="0"/>
	 -->
	<!--

		- This bean configures the 'prefix' and 'suffix' properties of
		- InternalResourceViewResolver, which resolves logical view names
		- returned by Controllers. For example, a logical view name of "vets"
		- will be mapped to "/WEB-INF/jsp/vets.jsp".
	-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/jsp/"
			p:suffix=".jsp" p:order="0"/>
			
    <bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJacksonJsonView"/>

	<!--
		- The AtomView rendering a Atom feed of the visits
		<bean id="visits" class="org.springframework.samples.petclinic.web.VisitsAtomView"/>

	<bean id="vets" class="org.springframework.web.servlet.view.xml.MarshallingView">
		<property name="contentType" value="application/vnd.springsource.samples.petclinic+xml"/>
		<property name="marshaller" ref="marshaller"/>
	</bean>

	<oxm:jaxb2-marshaller id="marshaller">
		<oxm:class-to-be-bound name="org.springframework.samples.petclinic.Vets"/>
	</oxm:jaxb2-marshaller>
	 -->
	<!--
		- Message source for this context, loaded from localized "messages_xx" files.
		- Could also reside in the root application context, as it is generic,
		- but is currently just used within PetClinic's web tier.
	-->
	<!-- enable access to externalized properties via PropertyPlaceholderConfigurer -->
	<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="WEB-INF/missconsult.properties"/>
	</bean>  -->
	<bean id="deployProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean"
        p:location="/WEB-INF/missconsult.properties" />
        
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" p:basename="messages"/>
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<!-- one of the properties available; the maximum file size in bytes -->
    	<property name="maxUploadSize" value="104857600"/>
	</bean> 
</beans>
